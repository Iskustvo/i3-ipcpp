#!/bin/sh

# Set default values.
default_prefix='/usr/local'
default_includedir='include/i3-ipc++'
default_libdir="lib/i3-ipc++"
default_build_static='yes'
default_build_dynamic='yes'
default_build_examples='yes'
default_debug_version='no'

# Descprition   Prints the "Expected usage", "Default value" and "Description" of one option.
#               The line is printed in format specified by "printf_table_format" global variable.
#
# ${1}          Name of the option. It is expected that global variable "default_${1}" exist(with '-' replaced by '_').
#
# ${2}          Expected value of the option.
#
# ${3}          Description of the option.
print_option_usage()
{
    default_option="default_$(echo "${1}" | sed 'y/-/_/')"
    printf "${printf_table_format}\n" "--${1}=${2}" "$(eval "echo \"\${${default_option}}\"")" "${3}"
}

# Descprition   Prints the usage of the script as well as usage of all avalible options.
print_help()
{
    # Print script usage.
    printf 'Usage:\n\t./configure [options]\n\n\n'

    # Define table format.
    printf_table_format='%-25s%-18s%s'

    # Print header of the table.
    printf "${printf_table_format}\n\n" 'Option' 'Default value' 'Description'

    # Print usage of each avalible option as one row of the table.
    print_option_usage 'prefix'         '<path>' 'Root path where project will be installed.'
    print_option_usage 'includedir'     '<path>' 'Path where public headers will be installed, relative to "--prefix".'
    print_option_usage 'libdir'         '<path>' 'Path where library will be installed, relative to "--prefix".'
    print_option_usage 'build-static'   'yes/no' 'Build static version of the library.'
    print_option_usage 'build-dynamic'  'yes/no' 'Build dynamic version of the library.'
    print_option_usage 'build-examples' 'yes/no' 'Build example programs which use this library.'
    print_option_usage 'debug-version'  'yes/no' 'Use no optimizations and enable asserts and debug symbols.'
}

# Parse options from command line.
for option in "${@}"; do
    case "${option}" in
        # Installation paths.
        --prefix=*) prefix="$(echo "${option}" | sed 's/^--prefix=//')";;
        --includedir=*) includedir="$(echo "${option}" | sed 's/^--includedir=//')";;
        --libdir=*) libdir="$(echo "${option}" | sed 's/^--libdir=//')";;

        # Build targets.
        --build-static=*)
            value="$(echo "${option}" | sed 's/^--build-static=//')"
            case "${value}" in
                yes|no) build_static="${value}";;
                *)
                    printf "Invalid value '${value}' for option '--build-static'.\n" 1>&2
                    print_help
                    exit 1
                    ;;
            esac
            ;;
        --build-dynamic=*)
            value="$(echo "${option}" | sed 's/^--build-dynamic=//')"
            case "${value}" in
                yes|no) build_dynamic="${value}";;
                *)
                    printf "Invalid value '${value}' for option '--build-dynamic'.\n" 1>&2
                    print_help
                    exit 1
                    ;;
            esac
            ;;
        --build-examples=*)
            value="$(echo "${option}" | sed 's/^--build-examples=//')"
            case "${value}" in
                yes|no) build_examples="${value}";;
                *)
                    printf "Invalid value '${value}' for option '--build-examples'.\n" 1>&2
                    print_help
                    exit 1
                    ;;
            esac
            ;;

        # Build options.
        --debug-version=*)
            value="$(echo "${option}" | sed 's/^--debug-version=//')"
            case "${value}" in
                yes|no) debug_version="${value}";;
                *)
                    printf "Invalid value '${value}' for option '--debug-version'.\n" 1>&2
                    print_help
                    exit 1
                    ;;
            esac
            ;;

        # Manual.
        --help)
            print_help
            exit 0
            ;;

        # Invalid option.
        *)
            printf "Unknown option: '${option}'\n"
            print_help
            exit 1
            ;;
    esac
done

# Set unspecified options to default values.
prefix="${prefix:=${default_prefix}}"
includedir="${includedir:=${default_includedir}}"
libdir="${libdir:=${default_libdir}}"
build_static="${build_static:=${default_build_static}}"
build_dynamic="${build_dynamic:=${default_build_dynamic}}"
build_examples="${build_examples:=${default_build_examples}}"
debug_version="${debug_version:=${default_debug_version}}"

# Configure all build targets and libraries for installation.
if [ "${build_static}" = 'yes' ]; then
    targets="${targets} static_lib "
    [ "${build_examples}" = 'yes' ] && targets="${targets} static_lib_examples "
    install_libs="${install_libs} install_static_lib "
fi
if [ "${build_dynamic}" = 'yes' ]; then
    targets="${targets} dynamic_lib "
    [ "${build_examples}" = 'yes' ] && targets="${targets} dynamic_lib_examples "
    install_libs="${install_libs} install_dynamic_lib "
fi

# Configure debug flags.
if [ "${debug_version}" = 'yes' ]; then
    debug_cpp_flags=''
    debug_cxx_flags='-O0 -g3'
else
    debug_cpp_flags='-DNDEBUG'
    debug_cxx_flags=''
fi

# Generate Makefile.
cat <<- EOF > Makefile
	$(printf '%52s' '' | tr ' ' '#') CONFIGURATION $(printf '%53s' '' | tr ' ' '#')

	PREFIX := $(echo "${prefix}" | xargs)
	INCLUDE_DIR := $(echo "${includedir}" | xargs)
	LIB_DIR := $(echo "${libdir}" | xargs)
	TARGETS := $(echo "${targets}" | xargs)
	INSTALL_LIBS := $(echo "${install_libs}" | xargs)
	DEBUG_CPPFLAGS := $(echo "${debug_cpp_flags}" | xargs)
	DEBUG_CXXFLAGS := $(echo "${debug_cxx_flags}" | xargs)

EOF
cat Makefile.in >> Makefile

# Print final configuration.
cat <<- EOF
	Configuration
	-------------
	--prefix=${prefix}
	--includedir=${includedir}
	--libdir=${libdir}
	--build-static=${build_static}
	--build-dynamic=${build_dynamic}
	--build-examples=${build_examples}
	--debug-version=${debug_version}
EOF
